@{
    Layout = "~/Views/Shared/LayoutBuilders.cshtml";
    @using ExpressBase.Common;
    @using ExpressBase.Common.Objects;
    @using ExpressBase.Common.Structures;
    @using Newtonsoft.Json;
    @using ExpressBase.Common.Helpers;
    var versionObj = EbSerializers.Json_Serialize(ViewBag.dsObj);
    bool _versioning = ViewBag.versioning;
}

<script type="text/javascript" src="/Eb_Object/cxt2js_dev?t=@ViewBag.ObjType&v=@ExpressBase.Common.Singletons.BuildInfo.Md5Version"></script>

<script>
    //Html.Raw(ViewBag.Meta);
    //Html.Raw(ViewBag.JsObjects);
    //Html.Raw(ViewBag.EbObjectTypes);
    //Html.Raw(ViewBag.TypeRegister);

    $(document).ready(function () {
        commonObj.init();

        let NameObj4Title = @Html.Raw(ViewBag.NameObj4Title);// view bag do not support local languages
        $('title').text(NameObj4Title.Value);
    });

    var commonObj = new Eb_ObjectCommon('@ViewBag.Refid', @Html.Raw(versionObj), '@ViewBag.Status', '@ViewBag.VersionNumber', tabnum = 0, type = @ViewBag.ObjType, major = @ViewBag.Majorv, ssurl = '@ViewBag.ServiceUrl', versioning = '@_versioning');
    $("#layout_div").data("commonObj", commonObj);
    console.log("Index   " + $("#layout_div").data("commonObj"));

</script>
<div id="object_Dashboard_main">
    @await Component.InvokeAsync("ObjectDashboard", new { refid = ViewBag.Refid, objname = ViewBag.ObjectName, status = ViewBag.Status, vernum = ViewBag.VersionNumber, workcopies = ViewBag.Workingcopy, _tags = ViewBag.Tags, _apps = ViewBag.AppId, _dashbord_tiles = ViewBag.DashboardTiles, _versioning = @_versioning })
</div>

<div class="row codedit" id="codedit" style="margin-top:38px;">
    <div class="tab-section-common" id="tab-section-common">
        <ul class="nav nav-tabs" id="versionNav">

            @if (ViewBag.IsNew == "false" && (ViewBag.ObjType == (int)EbObjectTypes.DataReader || ViewBag.ObjType == (int)EbObjectTypes.DataWriter))
            {
                <li class="">
                    <a data-toggle="tab" class="cetab" id="ProfilerHome" href="#builderDashB">
                        <i class="fa fa-home" aria-hidden="true"></i> performance
                    </a>
                </li>
            }
            @{
                var icon = "";
                var head = " v " + ViewBag.VersionNumber;
                if (!_versioning)
                {
                    icon = "fa-pencil";
                    head = (((string)ViewBag.ObjectName).Length > 8) ? ((string)ViewBag.ObjectName).Substring(0, 8) + "..." : ViewBag.ObjectName;
                }
                else if (ViewBag.VersionNumber.Substring(ViewBag.VersionNumber.Length - 1) == "w")
                {
                    icon = "fa-pencil";
                }
                else
                {
                    icon = "fa-lock";
                }


            }
            <li class="active">
                <a data-toggle="tab" class="cetab" tnum="0" href="#vernav0" data-verNum="@ViewBag.VersionNumber">
                    <i class='fa @(icon)' aria-hidden='true'></i>
                    @head
                </a>
            </li>
            @if (ViewBag.ObjType == (int)EbObjectTypes.Report)
            {
                <li class="">
                    <a data-toggle="tab" class="cetab" id="preview_tab_btn" href="#preview_tab">
                        <i class="fa fa-play-circle" aria-hidden="true"></i> Preview
                    </a>
                </li>
            }

        </ul>
    </div>
    <div class="tab-content tab-cont-common" id="versionTab">
        @if (ViewBag.ObjType == (int)EbObjectTypes.DataReader || ViewBag.ObjType == (int)EbObjectTypes.DataWriter)
        {
            <div class="tab-pane" id="builderDashB">
                <div class="container-fluid" id="builderDashB_bdy">
                    @*@await Component.InvokeAsync("SqlProfiler", new { refid = ViewBag.Refid })*@
                </div>
            </div>
        }
        <div id="vernav0" class="tab-pane fade in active code_edit" data-id="new">
            @{
                if (ViewBag.ObjType == (int)EbObjectTypes.WebForm)
                {
                    @await Component.InvokeAsync("FormBuilder", new { dsobj = versionObj, tabnum = 0, type = ViewBag.ObjType, refid = ViewBag.Refid, ssurl = ViewBag.ServiceUrl })

                }

                else if (ViewBag.ObjType == (int)EbObjectTypes.DataReader || ViewBag.ObjType == (int)EbObjectTypes.DataWriter || ViewBag.ObjType == (int)EbObjectTypes.SqlFunction)
                {
                    @await Component.InvokeAsync("CodeEditor", new { dsobj = versionObj, tabnum = 0, type = ViewBag.ObjType, refid = ViewBag.Refid, ssurl = ViewBag.ServiceUrl })
                }


                else if (ViewBag.ObjType == (int)EbObjectTypes.Report)
                {
                    @await Component.InvokeAsync("ReportBuilder", new { dsobj = versionObj, tabnum = 0, type = ViewBag.ObjType, refid = ViewBag.Refid, ssurl = ViewBag.ServiceUrl })

                }

                else if (ViewBag.ObjType == (int)EbObjectTypes.FilterDialog)
                {
                    @await Component.InvokeAsync("FilterDialogBuilder", new { dsobj = versionObj, tabnum = 0, type = ViewBag.ObjType, refid = ViewBag.Refid, ssurl = ViewBag.ServiceUrl })

                }

                else if (ViewBag.ObjType == (int)EbObjectTypes.UserControl)
                {
                    @await Component.InvokeAsync("UserControl", new { dsobj = versionObj, tabnum = 0, type = ViewBag.ObjType, refid = ViewBag.Refid, ssurl = ViewBag.ServiceUrl })

                }

                else if (ViewBag.ObjType == (int)EbObjectTypes.EmailBuilder)
                {
                    @await Component.InvokeAsync("Emailbuilder", new { dsobj = versionObj, tabnum = 0, type = ViewBag.ObjType, refid = ViewBag.Refid, ssurl = ViewBag.ServiceUrl })

                }

                else if (ViewBag.ObjType == (int)EbObjectTypes.TableVisualization && ViewBag.mode)
                {
                    @await Component.InvokeAsync("DVBuilder", new { dsobj = versionObj, tabnum = 0, type = ViewBag.ObjType, refid = ViewBag.Refid, ssurl = ViewBag.ServiceUrl, url = ViewBag.BrowserURLContext })

                }

                else if (ViewBag.ObjType == (int)EbObjectTypes.TableVisualization)
                {
                    @await Component.InvokeAsync("DVTable", new { dsobj = versionObj, tabnum = 0, type = ViewBag.ObjType, refid = ViewBag.Refid, ssurl = ViewBag.ServiceUrl, counter = 0, url = ViewBag.BrowserURLContext })

                }

                else if (ViewBag.ObjType == (int)EbObjectTypes.ChartVisualization)
                {
                    object o = null;
                    @await Component.InvokeAsync("DVChart", new { googlekey = ViewBag.al_arz_map_key, dsobj = versionObj, tabnum = 0, type = ViewBag.ObjType, refid = ViewBag.Refid, ssurl = ViewBag.ServiceUrl, counter = 0, data = o })

                }

                else if (ViewBag.ObjType == (int)EbObjectTypes.MapView)
                {
                    object o = null;
                    @await Component.InvokeAsync("MapView", new { googlekey = ViewBag.al_arz_map_key, dsobj = versionObj, tabnum = 0, type = ViewBag.ObjType, refid = ViewBag.Refid, ssurl = ViewBag.ServiceUrl, counter = 0, data = o })

                }

                else if (ViewBag.ObjType == (int)EbObjectTypes.BotForm)
                {
                    @await Component.InvokeAsync("BotFormBuilder", new { dsobj = versionObj, tabnum = 0, type = ViewBag.ObjType, refid = ViewBag.Refid, ssurl = ViewBag.ServiceUrl })

                }

                else if (ViewBag.ObjType == (int)EbObjectTypes.SmsBuilder)
                {
                    @await Component.InvokeAsync("Smsbuilder", new { dsobj = versionObj, tabnum = 0, type = ViewBag.ObjType, refid = ViewBag.Refid, ssurl = ViewBag.ServiceUrl })

                }

                else if (ViewBag.ObjType == (int)EbObjectTypes.Api)
                {
                    @await Component.InvokeAsync("ApiBuilder", new { dsobj = versionObj, tabnum = 0, type = ViewBag.ObjType, refid = ViewBag.Refid, ssurl = ViewBag.ServiceUrl })

                }
                else if (ViewBag.ObjType == (int)EbObjectTypes.MobilePage)
                {
                    @await Component.InvokeAsync("MobilePage", new { dsobj = versionObj, tabnum = 0, type = ViewBag.ObjType, refid = ViewBag.Refid, ssurl = ViewBag.ServiceUrl })

                }
                else if (ViewBag.ObjType == (int)EbObjectTypes.DashBoard)
                {
                    @await Component.InvokeAsync("DashBoardBuilder", new { googlekey = ViewBag.al_arz_map_key, dsobj = versionObj, tabnum = 0, type = ViewBag.ObjType, refid = ViewBag.Refid, ssurl = ViewBag.ServiceUrl })

                }
                else if (ViewBag.ObjType == (int)EbObjectTypes.CalendarView)
                {
                    @await Component.InvokeAsync("CalendarViewBuilder", new { dsobj = versionObj, tabnum = 0, type = ViewBag.ObjType, refid = ViewBag.Refid, ssurl = ViewBag.ServiceUrl })

                }
                else if (ViewBag.ObjType == (int)EbObjectTypes.SqlJob)
                {
                    @await Component.InvokeAsync("SqlJob", new { dsobj = versionObj, tabnum = 0, type = ViewBag.ObjType, refid = ViewBag.Refid, ssurl = ViewBag.ServiceUrl })

                }
                else if (ViewBag.ObjType == (int)EbObjectTypes.HtmlPage)
                {
                    @await Component.InvokeAsync("HtmlPageBuilder", new { dsobj = versionObj, tabnum = 0, type = ViewBag.ObjType, refid = ViewBag.Refid, ssurl = ViewBag.ServiceUrl })
                }
            }
        </div>
        @if (ViewBag.ObjType == (int)EbObjectTypes.Report)
        {
            <div class="tab-pane preview_tab" id="preview_tab">
                <div class="container-fluid" id="preview_wrapper">
                </div>
            </div>
        }
    </div>
</div>
