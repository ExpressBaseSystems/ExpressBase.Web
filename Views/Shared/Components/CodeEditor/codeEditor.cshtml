@{ 
    @using ExpressBase.Common;
    var dsObj = EbSerializers.Json_Deserialize(ViewBag.dsObj);
}

<div class="ds-page" id="ds-page@(ViewBag.tabnum)">
    <div class='col-md-10 code-window' id='codewindow@(ViewBag.tabnum)' style='padding: 0;'>
        <textarea id='code@(ViewBag.tabnum)' name='code' class='code'></textarea>
    </div>
    <div class='col-md-2 col-md-offset-10 ds-prop'>
        <div id='dspropgrid@(ViewBag.tabnum)' class='pull-right' style='padding:0px'></div>
    </div>
</div>
<script>    
    if (@ViewBag.tabnum === 0) {
        var commonO = $("#layout_div").data("commonObj");
    }
        if (@ViewBag.tabnum === 0) {
            CodeMirror.commands.autocomplete = function (cm) {
                CodeMirror.showHint(cm, CodeMirror.hint.sql);
            };
        }
     var readonly = '@ViewBag.VersionNumber'.slice(-1);
        if (readonly === "w" ||'@ViewBag.IsNew'==="True")
            _readonly = false;
        else
         _readonly = true;
        alert(readonly);
        alert(_readonly);
        window["editor@(ViewBag.tabnum)"] = CodeMirror.fromTextArea(document.getElementById("code@(ViewBag.tabnum)"), {
            mode: "text/x-pgsql",
            lineNumbers: true,
            lineWrapping: false,
            extraKeys: { "Ctrl-Space": "autocomplete" },
            autoRefresh: true,
            readOnly: _readonly,
            foldGutter: { rangeFinder: new CodeMirror.fold.combine(CodeMirror.fold.brace, CodeMirror.fold.comment) },
            gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"]
        });
     var orig = CodeMirror.hint.sql;
        CodeMirror.hint.sql = function (editor) {
            var inner = orig(editor) || {from: editor.getCursor(), to: editor.getCursor(), list: []};
            var SqlFnList = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.SqlFns));
            $.each(SqlFnList, function (i, fdj) {
                inner.list.push(fdj);
            });
            var cursor = editor.getCursor();
            var currentLine = editor.getLine(cursor.line);
            var start = cursor.ch;
            var end = start;
            while (end < currentLine.length && /[\w$]+/.test(currentLine.charAt(end))) ++end;
            while (start && /[\w$]+/.test(currentLine.charAt(start - 1))) --start;
            var curWord = start != end && currentLine.slice(start, end);
            var regex = new RegExp('^' + curWord, 'i');
            var result = {
                list: (!curWord ? inner.list : inner.list.filter(function (item) {
                    return item.match(regex);
                })).sort(),
                from: CodeMirror.Pos(cursor.line, start),
                to: CodeMirror.Pos(cursor.line, end)
            };

            return result;
        };
        setTimeout(function () {
            window["editor@(ViewBag.tabnum)"].refresh();
        }, 500);
    commonO.ObjCollection["#vernav@(ViewBag.tabnum)"] = new DataSourceWrapper('@ViewBag.Refid', '@ViewBag.VersionNumber', @ViewBag.ObjType, @Html.Raw(ViewBag.dsObj), '@ViewBag.Status', @ViewBag.tabnum);
</script>
<style>
    .CodeMirror{

    }
    .ds-prop {
        position: fixed;
    }
    .param-div {
        position: fixed;
    }
    .CodeMirror-gutters {
        z-index: 0;
    }
    .CodeMirror-gutter-wrapper {
        z-index: 2;
    }
    div.CodeMirror-cursors {
        z-index: 2;
    }
        .CodeMirror-gutter-elt {
    /*z-index: 3;*/
}

    .CodeMirror-vscrollbar, .CodeMirror-hscrollbar, .CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {
        z-index: 2;
    }
</style>