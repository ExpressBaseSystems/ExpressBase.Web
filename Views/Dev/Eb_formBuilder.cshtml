@using ExpressBase.Common.Objects;
@using ExpressBase.Objects;
@using ExpressBase.Common.Objects.Attributes;

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
<script type="text/javascript" src="~/js/"></script>
<link rel="stylesheet" href="~/lib/codemirror/lib/codemirror.css">
<link rel="stylesheet" href="~/lib/codemirror/addon/hint/show-hint.css">
<link rel="stylesheet" href="~/lib/codemirror/addon/fold/foldgutter.css" />
<script src="~/lib/codemirror/lib/codemirror.js"></script>
<script src="~/lib/codemirror/addon/hint/show-hint.js"></script>
<script src="~/lib/codemirror/addon/hint/javascript-hint.js"></script>
<script src="~/lib/codemirror/mode/javascript/javascript.js"></script>
<script src="~/lib/codemirror/addon/fold/foldcode.js"></script>
<script src="~/lib/codemirror/addon/fold/foldgutter.js"></script>
<script src="~/lib/codemirror/addon/fold/brace-fold.js"></script>
<script src="~/lib/codemirror/addon/fold/xml-fold.js"></script>
<script src="~/lib/codemirror/addon/fold/comment-fold.js"></script>
<script src="~/lib/codemirror/mode/xml/xml.js"></script>@{
    Layout = "~/Views/Shared/_Layout1.cshtml";
}
@{
    int typeInt = (string.IsNullOrEmpty(ViewBag.Objtype)) ? Convert.ToInt32(Context.Request.Query["objtype"]) : Convert.ToInt32(ViewBag.Objtype);
    EbObjectType type = (EbObjectType)typeInt;

    var _builderType = (BuilderType)Enum.Parse(typeof(BuilderType), type.ToString(), true);
    var _toolBox = new EbToolbox(_builderType);
}

<div class='eb-loaderFixed'><i class='fa fa-spinner fa-pulse fa-4x fa-fw center-block'></i></div>
<div id="con" class="form-buider-cont">
    <div id="toolbox_cont" class='formB-box toolbox-cont'>
        <div class="pgHead">Toolbox  <i class="fa fa-wrench" aria-hidden="true"></i> <i class="fa fa-thumb-tack pin" onclick="slideLeft ('.form-save-wraper', '#toolbox_cont')" aria-hidden="true"></i></div>
        <div id="form-buider-toolBox" class="form-buider-toolBox">
            @Html.Raw(_toolBox.html)
        </div>
    </div>
    <div class="form-save-wraper">

        <div class="formB-box fb-cont">
            <input type="text" id="save_txtBox" required class="form-control" style="width:90%;display:inline-block;" placeholder="Save As...">
            <button id="saveformBtn" type="submit" class="btn btn-default">Save</button>
        </div>

        <div id="form-buider-form" class="formB-box form-buider-form">
            @Html.Raw(@ViewBag.html)
            @*<textarea id="txtValues" rows="15" cols="40"></textarea>*@
            <textarea id="code" name="code" rows="50" cols="40"></textarea>
        </div>
    </div>
    <input type="hidden" id="objtype" value="@type" />
    <input type="hidden" id="objid" value="@ViewBag.Objid" />
    <div id='form-buider-propGrid' class='formB-box property-grid-cont'>
        <div id='pgWraper'></div>
    </div>
</div>

<script>
    window.onload = function () {
        CodeMirror.commands.autocomplete = function (cm) {
            CodeMirror.showHint(cm, CodeMirror.hint.javascript);
        };
        window.editor = CodeMirror.fromTextArea(code, {
            mode: "javascript",
            lineNumbers: true,
            lineWrapping: true,
            extraKeys: { "Ctrl-Space": "autocomplete" },
            foldGutter: {
                rangeFinder: new CodeMirror.fold.combine(CodeMirror.fold.brace, CodeMirror.fold.comment)
            },
            gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"]
        });
    };

    @Html.Raw(_toolBox.AllControlls);
    @Html.Raw(_toolBox.AllMetas);
    @Html.Raw(_toolBox.JsonToJsObjectFuncs);
    @Html.Raw(_toolBox.TypeRegister);

    var formBuilderObj = null;
    var objid =$("#objid").val();
    var FBid = "form-buider-form";
    var editModeFormObj = null;
    var ToolBoxId = "form-buider-toolBox";
    var PGid = "form-buider-propGrid";
    // if edit mode
    if(objid){
        editModeObj = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(@ViewBag.Json));
        //$.each(editModeFormObj, funcion(i, obj) {  });
        formBuilderObj= new formBuilder(ToolBoxId, FBid, PGid, @((int)_builderType), @typeInt);
        formBuilderObj.InitEditModeCtrls(editModeObj);
    }
    else
        formBuilderObj= new formBuilder(ToolBoxId, FBid, PGid, @((int)_builderType), @typeInt);            
</script>


<style>
    /*overridding*/



    .property-grid-cont .sp-preview {
        width: calc(100% - 15px) !important;
        height: 15px;
    }

    .property-grid-cont .sp-replacer {
        width: 100% !important;
        padding: 2px;
    }

    .form-buider-form .btn {
        padding: 3px 12px !important;
        width: 100%;
    }

    .form-buider-form table td {
        border: 1px dashed #cccccc;
        padding: 1px;
        vertical-align: initial;
    }

    .moveBtn {
        font-size: 10px;
        vertical-align: top;
        margin-left: 6px;
        margin-top: 3px;
        opacity: .9;
    }

        .moveBtn:hover, .moveBtn:focus {
            color: #fff !important;
            background-color: black;
            opacity: 1;
        }

    .close {
        margin-top: -1px;
        height: 17px;
    }

        .close:hover, .close:focus {
            color: #f00 !important;
            opacity: .6 !important;
        }
</style>
