@using ExpressBase.Common.Objects;

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Summernote</title>
    
    <link href="http://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.8/summernote.css" rel="stylesheet">
    <script src="http://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.8/summernote.js"></script>
    <link rel="stylesheet" type="text/css" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/themes/smoothness/jquery-ui.css">*@
</head>
<body>
    @{
        Layout = "~/Views/Shared/_Layout1.cshtml";
        @using ExpressBase.Common;
    }
    <script>
    @Html.Raw(ViewBag.Meta);
    @Html.Raw(ViewBag.JsObjects);
    @Html.Raw(ViewBag.ReportSections);
    @Html.Raw(ViewBag.EbObjectTypes);

    $.fn.extend({
        treed: function (o) {

            var openedClass = 'glyphicon-minus-sign';
            var closedClass = 'glyphicon-plus-sign';

            if (typeof o !== 'undefined') {
                if (typeof o.openedClass !== 'undefined') {
                    openedClass = o.openedClass;
                }
                if (typeof o.closedClass !== 'undefined') {
                    closedClass = o.closedClass;
                }
            }
            var tree = $(this);
            tree.addClass("tree");
            tree.find('li').has("ul").each(function () {
                var branch = $(this);
                branch.prepend("<i class='indicator glyphicon " + closedClass + "'></i>");
                branch.addClass('branch');
                branch.on('click', function (e) {
                    if (this === e.target) {
                        var icon = $(this).children('i:first');
                        icon.toggleClass(openedClass + " " + closedClass);
                        $(this).children().children().toggle();
                    }
                });
                branch.children().children().toggle();
            });
            tree.find('.branch .indicator').each(function () {
                $(this).on('click', function () {
                    $(this).closest('li').click();
                });
            });
            tree.find('.branch>a').each(function () {
                $(this).on('click', function (e) {
                    $(this).closest('li').click();
                    e.preventDefault();
                });
            });
            tree.find('.branch>button').each(function () {
                $(this).on('click', function (e) {
                    $(this).closest('li').click();
                    e.preventDefault();
                });
            });
        }
    });

    </script>
    <div class="container-fluid">
        <div class="row dshbrd">
            <div>
                @{
                    var eobj = EbSerializers.Json_Serialize(ViewBag.dsobj);
                    if (ViewBag.IsNew == "true")
                    {
                        @await Component.InvokeAsync("ObjectDashboardInitial", new { objid = ViewBag.Obj_id });
                    }
                    else
                    {
                        @await Component.InvokeAsync("ObjectDashboard", new { objid = ViewBag.Obj_id, objname = ViewBag.ObjectName, totVer = ViewBag.VersionNumber, status = ViewBag.Status, desc = ViewBag.ObjectDesc });
                    }
                }
            </div>
        </div>
        <div class="col-md-2" id="colselect" style="height: 500px;overflow-y: auto;">
            <ul id="data-table-list"></ul>
           
        </div>
        <div class="col-md-8">
            <div id="summernote">
                @Html.Raw(ViewBag.html)
            </div>
        </div>
        <div class="col-md-2 pull-right">
            <div id="PropertyG">

            </div>
        </div>
    </div>

    <script>
        $(document).ready(function () {
            var propObj;
            var emailpropG = new Eb_PropertyGrid("PropertyG");


            if ('@ViewBag.dsobj'.indexOf("EbEmailTemplate") == -1)
            {
                var emailobj = new EbObjects["EbEmailTemplate"]("email");
                emailpropG.setObject(emailobj, AllMetas["EbEmailTemplate"]);
            }
            else
            {
                var emailobj = @Html.Raw(eobj);
                emailpropG.setObject(emailobj, AllMetas["EbEmailTemplate"]);

            }


            emailpropG.PropertyChanged = function (obj, Pname) {
                propObj = obj;
                if (obj.DataSourceRefId) {
                    getDataSourceColoums(obj.DataSourceRefId);
                }
                console.log(obj);
                console.log(emailobj);

            }

            var w = $('.col-md-10').css("width");
            // $('#summernote').summernote();

            $('#summernote').summernote({
                width: w,
                height: 300,                 // set editor height
                minHeight: null,             // set minimum height of editor
                maxHeight: null,             // set maximum height of editor
                focus: true                  // set focus to editable area after initializing summernote
            });

            $('#save').click(function () {
                propObj.Body = window.btoa($('#summernote').summernote('code'));
                $.post("../Dev/EmailTemplateSave",
                    {
                    "_Refid":'@ViewBag.Refid',
                    "PropObj": JSON.stringify(propObj)

                }, function (result) {
                });


        });
            $('#commit').click(function () {

            $.post("../Dev/EmailTemplateCommit",
                {
                    "_Refid":'@ViewBag.Refid',
                    "Htmlcode": $('#summernote').summernote('code'),
                    "PropObj": JSON.stringify(propObj),
                    "ChangeLog": $('#obj_changelog').text()
                }, function (result) {
                });


            });
        function getDataSourceColoums(DSid)
        {
            $("#get-col-loader").show();
            $.ajax({
                url: "../RB/GetColumns",
                type: "POST",
                cache: false,
                data: { refID: DSid },
                success: function (result) {
                    $("#get-col-loader").hide();
                    DrawColumnTree(result)
                }
            });

        }

        function DrawColumnTree(result) {

            $.each(result.columns, function (i, columnCollection) {
                $('#data-table-list').append(" <li><a>Datatable" + ++i + "</a><ul id='t" + i + "'></ul></li>");
                $.each(columnCollection, function (j, obj) {
                    $("#data-table-list ul[id='t" + i + "'").append("<li class='styl'>" + obj.columnName + "</li>");
                });
            });
            $('#data-table-list').treed();

            $('.styl').dblclick(function (e) {
                var colVal = "Table" + $(e.target).parent().siblings("a").text().slice(-1) + "." + $(e.target).text().trim();

                //alert(colVal);
                //var text = $(e.target).text();
                // alert(text);
                insertselected("«" + colVal + "»");
            });
        }
        //$('.note-editable').droppable({ accept: ".draggable", drop: onDropFunc.bind(this)});

        //function onDropFunc(event, ui) {
        //    var dropLoc = $(event.target);
        //    var col = $(ui.draggable);
        //    if (!dropLoc.hasClass('dropped')) {
        //        dropLoc.append(col.clone().prepend("@@").addClass('dropped').removeClass("draggable").css({
        //            position: 'relative',
        //            width:"150px",
        //            left: event.pageX - $('.note-editable').offset().left + 'px',
        //            top: event.pageY - $('.note-editable').offset().top + 'px'
        //        }));
        //    }
        //    else if (dropLoc.hasClass('dropped')){

        //        dropLoc.append(col.css({
        //            position: 'relative',
        //            left: event.pageX - $('.note-editable').offset().left + 'px',
        //            top: event.pageY - $('.note-editable').offset().top + 'px'
        //        }));
        //    }
        //    $('.dropped').draggable({
        //        cancel: "a.ui-icon",
        //        cursor: "move"
        //    });
        //};

        });


    </script>
</body>
</html>
<style>
    .ebdscols {
        cursor : pointer;
    }
</style>