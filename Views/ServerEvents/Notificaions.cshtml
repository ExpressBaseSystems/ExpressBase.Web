@{
    Layout = "~/Views/Shared/_Layout1.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <title>ServiceStack Chat</title>
    <link href="~/images/favicon.ico" rel="icon">
    <script src="~/js/jquery.min.js"></script>
    <script src="~/js/ss-utils.js"></script>
    <script src="~/js/eventsource.min.js"></script>
</head>
<body>
    <h1>Test</h1>

    <script>
        $.ajaxSetup({
            headers: {
                'Authorization': 'Bearer ' + getToken()
            }
        });

        document.cookie = "ss-tok=" + getToken();
        var channels = "notifications";
        var source = new EventSourcePolyfill('http://localhost:8000/event-stream?channels=notifications&t=' + new Date().getTime(), {
            headers: {
                'Authorization': 'Bearer ' +getToken()
            }
        }); //disable cache
        //var source = new EventSource('http://localhost:8000/event-stream?channels=notifications&t=' + new Date().getTime());
        source.addEventListener('error', function (e) {
            console.log(e);
            addEntry({ msg: "ERROR!", cls: "error" });
        }, false);

        var $txtMsg = $("#txtMsg").focus(), usersMap = {}, activeSub = null;
        function refreshUsers() {
            $.getJSON("http://localhost:8000/event-subscribers?channels=notifications", function (users) {
                usersMap = {};
                $.map(users, function (user) { usersMap[user.userId] = user; });
                $.ss.handlers["changeChannel"](selectedChannel());
            });
        }
        $.ss.eventReceivers = { "document": document };

        $(source).handleServerEvents({
            handlers: {
                onConnect: function (u) {
                    addEntry({ msg: "CONNECTED!", cls: "open" });

                    $.getJSON("http://localhost:8000/chathistory?channels=notifications", function (r) {
                        $.map(r.results, $.ss.handlers["chat"]);
                    });
                    refreshUsers();
                },
                onHeartbeat: function (msg, e) { if (console) console.log("onHeartbeat", msg, e); },
                onJoin: refreshUsers,
                onLeave: refreshUsers,
                onUpdate: refreshUsers,
                notify: function (m, e) {
                    alert((JSON.stringify(m)));
                },
                stopListening: function () { $.ss.eventSource.close(); }
            },
            receivers: {
                tv: {
                    watch: function (id) {
                        if (id.indexOf('youtube.com') >= 0) {
                            var qs = $.ss.queryString(id);
                            $("#tv").html(templates.youtube.replace("{id}", qs["v"])).show();
                        }
                        else if (id.indexOf('youtu.be') >= 0) {
                            var v = $.ss.splitOnLast(id, '/')[1];
                            $("#tv").html(templates.youtube.replace("{id}", v)).show();
                        } else {
                            $("#tv").html(templates.generic.replace("{id}", id)).show();
                        }
                    },
                    off: function () {
                        $("#tv").hide().html("");
                    }
                }
            }
        });

        var templates = {
            youtube: '<iframe width="640" height="360" src="//www.youtube.com/embed/{id}?autoplay=1" frameborder="0" allowfullscreen></iframe>',
            generic: '<iframe width="640" height="360" src="{id}" frameborder="0"></iframe>'
        };

        $(document).bindHandlers({
            announce: function (msg) {
                $("#announce").html(msg).fadeIn('fast');
                setTimeout(function () { $("#announce").fadeOut('slow'); }, 2000);
            },
            toggle: function () {
                $(this).toggle();
            },
            sendCommand: function () {
                $("#txtMsg").val($(this).html()).focus();
            },
            privateMsg: function () {
                $txtMsg.val("@@" + this.innerHTML + " ").focus();
            },
            removeReceiver: function (name) {
                delete $.ss.eventReceivers[name];
            },
            addReceiver: function (name) {
                $.ss.eventReceivers[name] = window[name];
            },
            toggleExamples: function () {
                var willHide = this.innerHTML == "hide";
                $(this).html(willHide ? "show" : "hide").parent().css({ height: willHide ? '25px' : 'auto' });
            },
            changeChannel: function (channel) {
                $("[data-channel]").removeClass('selected');
                $("[data-channel=" + channel + "]").addClass('selected');
                $("#txtMsg").focus();
            },
            startListening: function () { $.ss.reconnectServerEvents(); }
        }).on('customEvent', function (e, msg, msgEvent) {
            addEntry({ msg: "[event " + e.type + " message: " + msg + "]", cls: "event", channel: msgEvent.channel });
        });
        $.ss.handlers["changeChannel"](channels[channels.length - 1]);

        function addEntry(o) {
            console.log("addEntry", o);
            var id = "u_" + o.userId + "";
            var skipUser = $("#log .msg:last-child b").hasClass(id);
            var inactive = $(createUser($.extend(o, { displayName: o.userName }))).html();
            var user = o.userId && !skipUser ? "<b class='user " + id + "'>" + ($("#users ." + id).html() || inactive) + "</b>" : "<b class=" + id + ">&nbsp;</b>";
            var time = "<i>" + $.ss.tfmt12(new Date()) + "</i>";
            var highlight = o.msg.indexOf(activeSub.displayName.replace(" ", "")) >= 0 ? "highlight " : "";
            var filter = o.channel ? "=" + o.channel : "";
            $("#logs [data-channel" + filter + "]").append("<div id='m_" + (o.id || "0") + "' class='msg " + highlight + o.cls + "'>" +
                user + time + "<div>" + o.msg + "</div>" + "</div>").scrollTop(1E10);
        }
        function createUser(user) {
            return "<div class='user u_" + user.userId + "'><img src='" + (user.profileUrl || "/img/no-profile64.png") + "'/><span data-id='" +
                user.userId + "' data-click='privateMsg'>" + user.displayName + "</span></div>";
        }

        var msgHistory = [], historyIndex = -1;
        function postMsg() {
            var msg = $txtMsg.val(), parts, to = null;
            msgHistory.push(msg);

            if (msg[0] == "@@") {
                parts = $.ss.splitOnFirst(msg, " ");
                var toName = parts[0].substring(1);
                if (toName == "me") {
                    to = activeSub.userId;
                } else {
                    var matches = $.grep($("#users .user span"),
                        function (x) { return x.innerHTML.replace(" ", "").toLowerCase() === toName.toLowerCase(); });
                    to = matches.length > 0 ? matches[0].getAttribute("data-id") : null;
                }
                msg = parts[1];
            }
            if (!msg || !activeSub) return;
            var onError = function (e) {
                if (e.responseJSON && e.responseJSON.responseStatus)
                    $.ss.handlers["announce"](e.responseJSON.responseStatus.message);
            };
            var channel = selectedChannel();
            if (msg[0] == "/") {
                parts = $.ss.splitOnFirst(msg, " ");
                $.post("http://localhost:8000/channels/" + channel + "/raw", { from: activeSub.id, toUserId: to, message: parts[1], selector: parts[0].substring(1) }, function () { }).fail(onError);
            } else {
                $.post("http://localhost:8000/channels/" + channel + "/chat", { from: activeSub.id, toUserId: to, message: msg, selector: "cmd.chat" }, function () { }).fail(onError);
            }
            $txtMsg.val("");
        }
        $("#btnSend").click(postMsg);

        $txtMsg.keydown(function (e) {
            var keycode = (e.keyCode ? e.keyCode : e.which);
            if ($.ss.getSelection()) {
                if (keycode == '9' || keycode == '13' || keycode == '32' || keycode == '39') {
                    this.value += " ";
                    if (this.setSelectionRange) this.setSelectionRange(this.value.length, this.value.length);
                    return false;
                }
            }
            if (keycode == '13') { //enter
                postMsg();
            } else if (keycode == '38') { //up arrow
                historyIndex = Math.min(++historyIndex, msgHistory.length);
                $txtMsg.val(msgHistory[msgHistory.length - 1 - historyIndex]);
                return false;
            }
            else if (keycode == '40') { //down arrow
                historyIndex = Math.max(--historyIndex, -1);
                $txtMsg.val(msgHistory[msgHistory.length - 1 - historyIndex]);
            } else {
                historyIndex = -1;
            }
        }).keyup(function (e) {
            if (!$.ss.getSelection() && this.value[0] == '@@' && this.value.indexOf(' ') < 0) {
                var partialVal = this.value.substring(1);
                var matchingNames = $.grep($("#users .user span")
                    .map(function () { return this.innerHTML.replace(" ", ""); }), function (x) {
                        return x.substring(0, partialVal.length).toLowerCase() === partialVal.toLowerCase()
                            && x.toLowerCase() != activeSub.displayName.toLowerCase();
                    });

                if (matchingNames.length > 0) {
                    this.value += matchingNames[0].substring(partialVal.length);
                    if (this.setSelectionRange) this.setSelectionRange(partialVal.length + 1, this.value.length);
                    return false;
                }
            }
        });
    </script>
</body>
</html>