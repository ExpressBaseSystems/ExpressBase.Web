!function (t) { var o = "_sg_index_", s = "_sg_adj_"; t.widget("ui.table_scroll", { version: "1.0.0", options: { rowsInHeader: null, rowsInFooter: null, fixedColumnsLeft: 0, fixedColumnsRight: 0, scrollX: 0, scrollY: 0, rowsInScrollableArea: 10, columnsInScrollableArea: 5, overflowY: "auto", overflowX: "auto" }, _create: function () { this._columnsCount = -1, this._currentTouch = null, this._ensureSettings(), this.startFrom = 0, this._setActualCellIndexes(), this._yInitScroll(), this._yUpdateRowsVisibility(), this._xInitScroll(), this._xUpdateColumnsVisibility(), this._yUpdateScrollHeights(), this.widget().on("mousewheel", t.proxy(this._tableMouseWheel, this)), this.widget().on("DOMMouseScroll", t.proxy(this._tableMouseWheel, this)), this.widget().on("touchstart", t.proxy(this._touchStart, this)), this.widget().on("touchmove", t.proxy(this._touchMove, this)), this.widget().on("touchend", t.proxy(this._touchEnd, this)), this._xMoveScroll(this.options.scrollX), this._yMoveScroll(this.options.scrollY), this._yUpdateRowsVisibility(), this._xUpdateColumnsVisibility() }, _ensureSettings: function () { null == this.options.rowsInHeader && (this.options.rowsInHeader = this._table().tHead ? this._table().tHead.rows.length : 1), null == this.options.rowsInFooter && (this.options.rowsInFooter = this._table().tFoot ? this._table().tFoot.rows.length : 0) }, _xGetNumberOfColumns: function () { return -1 != this._columnsCount ? this._columnsCount : (this._columnsCount = Math.max.apply(null, t(this._table().rows).map(function () { return this.cells.length }).get()), t(".sg-v-scroll-cell", this.widget()).length > 0 && (this._columnsCount -= 1), this._columnsCount) }, _xNumberOfScrollableColumns: function () { var t = this._xGetNumberOfColumns() - this.options.fixedColumnsLeft - this.options.fixedColumnsRight; return 1 > t ? 1 : t }, _xScrollWidth: function () { var t = this._xGetNumberOfColumns() - this.options.fixedColumnsLeft - this.options.fixedColumnsRight; return t > this.options.columnsInScrollableArea ? this.options.columnsInScrollableArea : 1 > t ? 1 : t }, _xScrollNeeded: function () { var t = this._xGetNumberOfColumns() - this.options.fixedColumnsLeft - this.options.fixedColumnsRight; return t > this.options.columnsInScrollableArea }, _xInitScroll: function () { if (!(this._xGetNumberOfColumns() < this.options.fixedColumnsLeft + this.options.fixedColumnsRight || !this._xScrollNeeded() && "scroll" != this.options.overflowX)) { var o = this._table().insertRow(this._table().rows.length); if (this.options.fixedColumnsLeft > 0) { var s = t(o.insertCell(0)); s.attr("colspan", this.options.fixedColumnsLeft) } var i = t(o.insertCell(1)); i.attr("colspan", this._xScrollWidth()), i.addClass("sg-x-scroll-cell"); var l = t('<div class="sg-h-scroll-container"></div>'); l.css("overflow-x", "scroll"), l.css("margin-right", "-20000px"), l.width(i.width()); var e = t('<div style="height: 1px;"></div>'); if (e.width(this._xNumberOfScrollableColumns() / this._xScrollWidth() * i.width()), e.appendTo(l), l.appendTo(i), l.scroll(t.proxy(this._xUpdateColumnsVisibility, this)), this.options.fixedColumnsRight > 0) { var s = t(o.insertCell(2)); s.attr("colspan", this.options.fixedColumnsRight + (t(".sg-v-scroll-cell", this.widget()).length > 0 ? 1 : 0)) } } }, _xCurrentRelativeScrollLeft: function () { var o = t(".sg-h-scroll-container", this.widget()); return o.scrollLeft() / o.width() }, _xScrollDelta: function () { var o = t(".sg-h-scroll-container", this.widget()); return t("div", o).width() - o.width() }, _xScrollableColumnsCount: function () { return this._xNumberOfScrollableColumns() - this._xScrollWidth() }, _xColumnScrollStep: function () { return 0 == this._xScrollableColumnsCount() ? 0 : this._xScrollDelta() / this._xScrollableColumnsCount() }, _xMoveScroll: function (o) { o = Math.min(this._xScrollableColumnsCount(), o), o = Math.max(o, 0), o = this._xColumnScrollStep() * o; var s = t(".sg-h-scroll-container", this.widget()); s.scrollLeft() != o && s.scrollLeft(o) }, _setColumnVisibility: function (t, s, i, l) { for (var e = this._table().rows, r = i; l > r; r++) for (var n = e[r], h = 0; h < n.cells.length; h++) { var a = n.cells[h], c = a[o]; c == t && (a.colSpan && 1 != a.colSpan || (s && "none" == a.style.display && (a.style.display = ""), s || "none" == a.style.display || (a.style.display = "none"))) } }, _xFirstVisibleColumnWidth: function () { for (var o = this.options.rowsInHeader; o < this._table().rows.length - this.options.rowsInFooter - t(".sg-h-scroll-container", this.widget()).length; o++) if ("none" != t(this._table().rows[o]).css("display")) for (var s = this.options.fixedColumnsLeft; s < this._xGetNumberOfColumns() - this.options.fixedColumnsRight; s++) if ("none" != t(this._table().rows[o].cells[s]).css("display")) return t(this._table().rows[o].cells[s]).width(); return 0 }, _xLastVisibleColumnWidth: function () { for (var o = this.options.rowsInHeader; o < this._table().rows.length - this.options.rowsInFooter - t(".sg-h-scroll-container", this.widget()).length; o++) if ("none" != t(this._table().rows[o]).css("display")) for (var s = this._xGetNumberOfColumns() - this.options.fixedColumnsRight - 1; s >= this.options.fixedColumnsLeft; s--) if ("none" != t(this._table().rows[o].cells[s]).css("display")) return t(this._table().rows[o].cells[s]).width(); return 0 }, _xUpdateColumnsVisibility: function () { if (this._xScrollNeeded()) { for (var o = t(".sg-h-scroll-container", this.widget()), s = Math.floor(o.scrollLeft() / this._xColumnScrollStep()), i = (this._xCurrentRelativeScrollLeft(), this.options.fixedColumnsLeft); i < this._xGetNumberOfColumns() - this.options.fixedColumnsRight; i++) { var l = !1; i >= this.options.fixedColumnsLeft + s && i < this.options.fixedColumnsLeft + s + this.options.columnsInScrollableArea && (l = !0), this._setColumnVisibility(i, l, 0, this._table().rows.length - 1) } this._xUpdateScrollWidths() } }, _xUpdateScrollWidths: function () { var o = t(".sg-h-scroll-container", this.widget()), s = o.closest("td"); o.width(s.width()); var i = t("div", o); i.width(this._xNumberOfScrollableColumns() / this._xScrollWidth() * s.width()) }, _yScrollHeight: function () { var o = this._table().rows.length - this.options.rowsInHeader - this.options.rowsInFooter; return t(".sg-h-scroll-container", this.widget()).length > 0 && o-- , o > this.options.rowsInScrollableArea ? this.options.rowsInScrollableArea : 1 > o ? 1 : o }, _yNumberOfScrollableRows: function () { var o = this._table().rows.length - this.options.rowsInHeader - this.options.rowsInFooter; return t(".sg-h-scroll-container", this.widget()).length > 0 && o-- , 1 > o ? 1 : o }, _yScrollNeeded: function () { var o = this._table().rows.length - this.options.rowsInHeader - this.options.rowsInFooter; return t(".sg-h-scroll-container", this.widget()).length > 0 && o-- , o > this.options.rowsInScrollableArea }, _yInitScroll: function () { if (!(this._table().rows.length < this.options.rowsInHeader + this.options.rowsInFooter || !this._yScrollNeeded() && "scroll" != this.options.overflowY)) { var o = t(this._table().rows[0].insertCell(this._table().rows[0].cells.length)); o.attr("rowspan", this.options.rowsInHeader); var s = t(this._table().rows[this.options.rowsInHeader + this.startFrom].insertCell(this._table().rows[this.options.rowsInHeader + this.startFrom].cells.length)); s.attr("rowspan", this._yScrollHeight()), s.attr("width", "1px"), s.addClass("sg-v-scroll-cell"); var i = t('<div class="sg-v-scroll-container"></div>'); i.css("overflow-y", "scroll"), i.height(s.height()); var l = t('<div style="width: 1px;"></div>'); if (l.height(this._yNumberOfScrollableRows() / this._yScrollHeight() * s.height()), l.appendTo(i), i.appendTo(s), this._attachToEndScrolling(i, t.proxy(this._yUpdateRowsVisibility, this)), 0 != this.options.rowsInFooter) { var e = this._table().rows[this._yNumberOfScrollableRows() + this.options.rowsInHeader], r = t(e.insertCell(e.cells.length)); r.attr("rowspan", this.options.rowsInFooter) } } }, _yCurrentRelativeScrollTop: function () { var o = t(".sg-v-scroll-container", this.widget()); return o.scrollTop() / o.height() }, _yMoveScrollToRightRow: function (o) { var s = t(".sg-v-scroll-cell", this.widget()).closest("tr").get(0), i = this._table().rows[this.options.rowsInHeader + this.startFrom], l = t(".sg-v-scroll-container", this.widget()), e = t("div", l); if (s != i) { var r = t(i.insertCell(i.cells.length)); r.attr("rowspan", this._yScrollHeight()), r.addClass("sg-v-scroll-cell"), r.attr("width", "1px"); var n = t(".sg-v-scroll-container", t(s)); n.height(0), n.appendTo(r), s.deleteCell(s.cells.length - 1), l.height(r.height()), e.height(this._yNumberOfScrollableRows() / this._yScrollHeight() * r.height()), l.scrollTop(o * l.height()), l.get(0) } }, _yScrollDelta: function () { var o = t(".sg-v-scroll-container", this.widget()); return t("div", o).height() - o.height() }, _yScrollableRowsCount: function () { return this._yNumberOfScrollableRows() - this._yScrollHeight() }, _yRowScrollStep: function () { return 0 == this._yScrollableRowsCount() ? 0 : this._yScrollDelta() / this._yScrollableRowsCount() }, _yMoveScroll: function (o) { o = Math.min(this._yScrollableRowsCount(), o), o = Math.max(o, 0); var s = this._yRowScrollStep(); o = s * o; var i = t(".sg-v-scroll-container", this.widget()); i.scrollTop() != o && i.scrollTop(o + s / 2) }, _yUpdateScrollHeights: function () { var o = t(".sg-v-scroll-container", this.widget()), s = o.closest("td"); o.hide(), o.height(s.height()); var i = t("div", o); i.height(this._yNumberOfScrollableRows() / this._yScrollHeight() * s.height()), o.show() }, _yFirstVisibleRowHeight: function () { for (var o = this.options.rowsInHeader; o < this._table().rows.length - this.options.rowsInFooter - t(".sg-h-scroll-container", this.widget()).length; o++) if ("none" != t(this._table().rows[o]).css("display")) return t(this._table().rows[o]).height(); return 0 }, _yLastVisibleRowHeight: function () { for (var o = this._table().rows.length - this.options.rowsInFooter - t(".sg-h-scroll-container", this.widget()).length - 1; o >= this.options.rowsInHeader; o--) if ("none" != t(this._table().rows[o]).css("display")) return t(this._table().rows[o]).height(); return 0 }, _yUpdateRowsVisibility: function () { if (this._yScrollNeeded()) { for (var o = t(".sg-v-scroll-container", this.widget()), s = Math.floor(o.scrollTop() / this._yRowScrollStep()), i = this._yCurrentRelativeScrollTop(), l = this.options.rowsInHeader; l < this._table().rows.length - this.options.rowsInFooter - t(".sg-h-scroll-container", this.widget()).length; l++) { var e = !1; l >= this.options.rowsInHeader + s && l < this.options.rowsInHeader + s + this.options.rowsInScrollableArea && (e = !0), e ? t(this._table().rows[l]).show() : t(this._table().rows[l]).hide() } this.startFrom != s && (this.startFrom = s, this._yMoveScrollToRightRow(i)) } }, _attachToEndScrolling: function (o, s) { o.scroll(function () { clearTimeout(o.data("scrollTimer")), t.data(this, "scrollTimer", setTimeout(function () { s.apply(this) }, 300)) }) }, _tableMouseWheel: function (o) { var s = !1, i = !1, l = o.originalEvent; l.wheelDelta && (l.wheelDelta >= 120 ? s = !0 : l.wheelDelta <= -120 && (i = !0)), l.detail && (-3 == l.detail ? s = !0 : 3 == l.detail && (i = !0)); var e = t(".sg-v-scroll-container", this.widget()), r = 0; s && (r = this._yRowScrollStep() + 1), i && (r = -this._yRowScrollStep() - 1), 0 != r && e.scrollTop(e.scrollTop() - r), o.preventDefault() }, _touchStart: function (t) { if (t.originalEvent.touches && 1 == t.originalEvent.touches.length) { var o = t.originalEvent.touches[0] || t.originalEvent.changedTouches[0]; this._currentTouch = { X: o.pageX, Y: o.pageY }, t.preventDefault(), t.stopPropagation() } }, _touchMove: function (o) { if (o.originalEvent.touches && 1 == o.originalEvent.touches.length && null != this._currentTouch) { var s = o.originalEvent.touches[0] || o.originalEvent.changedTouches[0], i = { X: s.pageX, Y: s.pageY }, l = this._currentTouch.X - i.X, e = this._currentTouch.Y - i.Y, r = t(".sg-v-scroll-container", this.widget()); if (e > 0) { var n = this._yFirstVisibleRowHeight(); 0 != n && e > n && (r.scrollTop(r.scrollTop() + (this._yRowScrollStep() + 1)), this._currentTouch.Y -= n, this._yUpdateRowsVisibility()) } else { var n = this._yLastVisibleRowHeight(); 0 != n && -1 * n > e && (r.scrollTop(r.scrollTop() - (this._yRowScrollStep() + 1)), this._currentTouch.Y += n, this._yUpdateRowsVisibility()) } var h = t(".sg-h-scroll-container", this.widget()); if (l > 0) { var a = this._xFirstVisibleColumnWidth(); 0 != a && l > a && (h.scrollLeft(h.scrollLeft() + (this._xColumnScrollStep() + 1)), this._currentTouch.X -= n) } else { var a = this._xLastVisibleColumnWidth(); 0 != a && -1 * a > l && (h.scrollLeft(h.scrollLeft() - (this._xColumnScrollStep() + 1)), this._currentTouch.X += a) } o.preventDefault(), o.stopPropagation() } }, _touchEnd: function () { this._currentTouch = null }, _table: function () { return this.widget().get(0) }, _setActualCellIndexes: function () { for (var i = this._table().rows, l = 0; l < i.length; l++) { var e = i[l], r = t(e).get(0)[s]; r || (r = []); for (var n = 0; n < e.cells.length; n++) { var h = n - 1; if (n > 0) { var a = t(e.cells[n - 1]); h = a.get(0)[o], a.attr("colspan") && (h += this._getColSpan(a) - 1) } for (var c = t(e.cells[n]), u = h + 1, d = 0; d < r.length; d++) r[d].index <= u && (u += r[d].adjustment, r[d].adjustment = 0); if (c.get(0)[o] = u, c.attr("rowspan") > 1) for (var g = c.attr("rowspan"), _ = l + 1; l + g > _ && _ < i.length; _++) { var p = t(i[_]), w = p.get(0)[s]; w || (w = []), w.push({ index: u, adjustment: this._getColSpan(c) }), p.get(0)[s] = w } } } }, _getColSpan: function (t) { return t.data("scroll-span") ? t.data("scroll-span") : t.attr("colspan") ? 1 * t.attr("colspan") : 1 } }) }(jQuery);